// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
    @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
    @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
    @return asset($base, 'fonts/', $path);
}

$base-font-size: 16px!default; 


///Function to extrait the unit and allow the number to be used in calculations.
/// @uthor css-tricks.com/snipets/sass/strip-unit-functions
/// @ccess public.
/// @parame (Size) $number element's size
@function strip-unit ($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1); 
    }
    @return $number;
}

///Function to calculate the size in rem.
/// @uthor grafikart.
/// @ccess public 
/// @param (size) $size element's size.
/// @param (size) $base default's size elemen.
@function rem($size, $base: $base-font-size) {
    @return 1rem * $size / strip-unit($base);
}

///Function to calculate the size in em.
/// @uthor grafikart.
/// @ccess public 
/// @param (size) $size element's size.
/// @param (size) $base default's size elemen.
@function rem($size, $base: $base-font-size) {
    @return 1em * $size / strip-unit($base);
}